#!/bin/sh
#
# Install utility for z/OS Open Tools - https://github.com/ZOSOpenTools
#

#
# All zopen-* scripts MUST start with this code to maintain consistency.
#
setupMyself()
{
  ME=$(basename "$0")
  MYDIR="$(cd "$(dirname "$0")" > /dev/null 2>&1 && pwd -P)"
  INCDIR="${MYDIR}/../include"
  if ! [ -d "${INCDIR}" ] && ! [ -f "${INCDIR}/common.sh" ]; then
    echo "Internal Error. Unable to find common.sh file to source." >&2
    exit 8
  fi
  # shellcheck source=/dev/null
  . "${INCDIR}/common.sh"
}
setupMyself
checkWritable

printHelp(){
  cat << HELPDOC
zopen install is a utility for z/OS Open Tools to install and update
packages

Usage: zopen install [OPTION] [PARAMETERS] [PACKAGES]

Options:
  -u, --upgrade     check for package updates and apply
      --reinstall   reinstall currently installed package(s)
  -y, --yes         automatically answer yes to prompts
      --select      select a version to install from available versions
      --release-line [stable|dev]
                    the release line to install from
      --no-deps     do not install dependencies
      --install-or-upgrade
                    installs the package if not installed, or upgrades
                    the package if installed (deprecated as default behaviour)
      --nosymlink   do not integrate into filesystem through symlink 
                    redirection
      --no-set-active
                    do not change the currently active version
      --download-only
                    download installable package with no install
      --all         download all available packages and install
  -v, --verbose     run in verbose mode
  -h,-?, --help     display this help and exit


Examples:
  zopen install foo 
                    install package foo if not already installed
  zopen install --release-line DEV foo
                    install package foo from the DEV releaseline if
                    available
  zopen upgrade     upgrade all packages to latest version on their
                    releaseline
  zopen install -y foo bar --no-deps
                    install packages foo and bar without asking for
                    user confirmation and without installing any
                    dependencies
  zopen install /tmp/foo-1.2.3-4.zos.pax.Z
                    install package foo from the specified location
  zopen install /tmp/foo-1.2.3-4.zos.pax.Z bar-1.2.3.4.zos.pax.Z
                    install packages foo and bar from the specified 
                    locations

Report bugs at https://github.com/ZOSOpenTools/meta/issues .

HELPDOC
}

# Main code start here
# Need to set a number of variables for use in the install function
# which is common between install & upgrade
args=$*
verbose=false
debug=false
xdebug=false
selectVersion=false
# shellcheck disable=SC2034
setActive=true
downloadOnly=false
reinstall=false
installOrUpgrade=false
nosymlink=false
doNotInstallDeps=false
all=false
yesToPrompts=false
chosenRepos=""
fileinstall=false

while [ $# -gt 0 ]; do
  case "$1" in
    "-r" | "-reinstall" | "--reinstall")
      # shellcheck disable=SC2034
      reinstall=true  # If package already installed, reinstall
      ;;
      "--install-or-upgrade")
      # shellcheck disable=SC2034
      installOrUpgrade=true  # Upgrade package or install if not present
      ;;
    "--no-symlink")
      # shellcheck disable=SC2034
      nosymlink=true  # Do not mesh the package into the file system; leave as stand-alone
      ;;
    "--no-deps")
      doNotInstallDeps=true
      ;;
    "--release-line")
      shift
      # shellcheck disable=SC2034
      releaseLine=$(echo "$1" | awk '{print toupper($0)}')
      ;;
    "--yes" | "-y")
      # shellcheck disable=SC2034
      yesToPrompts=true  # Automatically answer 'yes' to any questions
      ;;
    "--download-only")
      downloadOnly=true  # Download remote package files to current directory only
      ;;
    "--no-set-active")
      # shellcheck disable=SC2034
      setactive=false  # Install package as normal but keep existing installation as active
      ;;
    "--all")
      all=true  # Install all packages
      ;;
    "--select")
      # shellcheck disable=SC2034
      selectVersion=true  # Display a selction table to allow version picking
      ;;
    "-h" | "--help" | "-?")
      printHelp "${args}"
      exit 0
      ;;
    "--debug")
      verbose=true
      # shellcheck disable=SC2034
      debug=true
      ;;
    "-v" | "--verbose")
      # shellcheck disable=SC2034
      verbose=true
      ;;
    "--xdebug")
      xdebug=true
    ;;
  "--version")
    zopen-version "${ME}"
    exit 0
    ;;
  -*) printError "Unsupported parameter '$1'";;
  *)
    # Generate a long @@ separated string to allow for embedded
    # spaces in hardcoded pax filenames
    chosenRepos="${chosenRepos}@@$1"
    ;;
  esac
  shift
done

${xdebug} && set -x && printVerbose "Enabled command execution trace" 

if ! ${all} && [ -z "${chosenRepos}" ]; then
  printInfo "No packages selected for installation."
  exit 4
fi

checkIfConfigLoaded

#export SSL_CERT_FILE="${ZOPEN_CA}"
#export GIT_SSL_CAINFO="${ZOPEN_CA}"
#export CURL_CA_BUNDLE="${ZOPEN_CA}"

# If any of the parameters passed in point to an existing file, then
# the user is attempting to install a port directly from the file system
# rather than a repo
printDebug "Checking input parameters for actual files"
potentials=$(echo "${chosenRepos}" | sed 's/@@/ /g')
for installRepo in ${potentials}; do
  [ -e "${installRepo}" ] && fileinstall=true && break
done

mutexReq "zopen" "zopen"
if ${downloadOnly}; then
  downloadDir="${PWD}"
  printDebug "Downloading pax to current directory '${downloadDir}'"
else
  printDebug "Installing to zopen file system: ${ZOPEN_ROOTFS}"
  if [ -z "${ZOPEN_ROOTFS}" ]; then
    printError "Unable to locate zopen file system, \${ZOPEN_ROOTFS} is undefined. Re-source zopen-config and retry command."
  fi
  downloadDir="${ZOPEN_ROOTFS}/var/cache/zopen"
fi

if [ ! -d "${downloadDir}" ]; then
  if ! mkdir -p "${downloadDir}"; then
    printError "Could not create download directory: ${downloadDir}. Check permissions and retry command."
  fi
fi

printDebug "Checking if installing from pax files: ${fileinstall}"
if ! ${fileinstall}; then
  printVerbose "Querying metadata for latest package information"
  getRepos
  grfgRc=$?
  [ 0 -ne ${grfgRc} ] && exit ${grfgRc};
fi

if ${fileinstall}; then
  printDebug "Installing from files as listed in arguments: '${chosenRepos}'"
  # generate the install list JSON from the @@-delimited inputs
  installList=$(echo "${chosenRepos}" \
    | jq --raw-input --arg d "$(pwd -P)" \
    'def make_object($url): {asset:{url: ( "file://" + $d + "/" + $url  )}}; . | split("@@") | map(select(.!="")|make_object(.)) | {"installqueue" :.} ')
else
  if ${all}; then
    # shellcheck disable=SC2034
    doNotInstallDeps=true
    installList=$(jq --raw-output '.release_data| keys[]' "${JSON_CACHE}") 
    installListCount=$(jq --raw-output '.release_data| keys | length' "${JSON_CACHE}") 
    printInfo "- Installing all currently-uninstalled packages"
    printInfo "- Checking installation status for '${installListCount}' packages"
  else
    installList=$(echo "$chosenRepos" | sed "s/@@/ /g")
    validateInstallList "${installList}"
  fi
  printInfo "- Generating install graph"
  progressHandler "spinner" &
  gigph=$!
  killph="kill -HUP ${gigph}"
  addCleanupTrapCmd "${killph}"
  generateInstallGraph "${installList}"
  ${killph} 2>/dev/null # if the timer is not running, the kill will fail
  waitforpid ${gigph}  # Make sure it's finished writing to screen
fi

if [ 0 -eq "$(echo "${installList}" | jq --raw-output '.installqueue| length')" ]; then
  printInfo "- No packages for install"
else
  if ${verbose}; then 
    printInfo " - The following package(s) will be installed:"
    echo "${installList}" | jq --raw-output '.installqueue | sort| .[] | .portname '
  fi
  processRepoInstallFile

fi
mutexFree "zopen"
exit
